@using QuizSystem.ViewModels.PaginationTestViewModels
@using Core.Enums
@model TestPaginationModel

@{
    var tests = Model.Tests.ToList();
    var testOrNull = Model.Tests.FirstOrDefault();
}

<style>
    .overflow-example {
        width: 100%; /* Set a fixed width for the container */
        white-space: nowrap; /* Prevent text from wrapping */
        overflow: hidden; /* Hide content that overflows the container */
        text-overflow: ellipsis; /* Add ellipsis for overflowed text */
    }
</style>

<div class="container mb-5">
    <nav class="navbar navbar-expand-lg navbar-light bg-light">
        <div class="container-fluid">
            <a href="@Url.Action("Create", "Test", new { userId = ViewBag.UserId})" class="btn btn-success btn-rounded">Create Test</a>
        </div>
    </nav>
</div>
@if (TempData["Error"] != null)
{
    <div class="col-md-12 alert alert-danger">
        <span><b>Sorry!</b> - @TempData["Error"]</span>
    </div>
}
<div style="text-align: center;">
    <form method="get" asp-controller="Test" asp-action="Index" class="mb-4">
        <div class="row">
            <!-- Center the input group and button -->
            <div class="col-md-6">
                <div class="input-group" style="width: 350px">
                    <div class="form-outline">
                        <input type="hidden" id="page" name="page" value="@Model.CurrentPageIndex" />
                        <input type="hidden" id="id" name="id" value="@Model.UserId" />
                        <input type="hidden" id="filterParam" name="filterParam" value="@Model.FilterParam" />
                        <input asp-for=@Model.SearchParam type="search" id="searchParam" name="searchParam" class="form-control" style="background-color: ghostwhite;" />
                        <label asp-for=@Model.SearchParam class="form-label" for="searchParam">Search by title</label>
                    </div>
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-search"></i>
                    </button>
                </div>
            </div>
            <div class="col-md-6 d-flex justify-content-end">
                <div class="dropdown">
                    <a class="btn btn-primary dropdown-toggle" href="#" role="button" id="dropdownMenuLink" data-mdb-toggle="dropdown" aria-expanded="false">
                        Filter By Visibility
                    </a>
                    <ul class="dropdown-menu" aria-labelledby="dropdownMenuLink">
                        <li>
                            <a href="@Url.Action("Index", "Test", new {id = Model.UserId,  searchParam = Model.SearchParam, sortOrder =Model.SortingParam, filterParam = Visibility.Public})" class="dropdown-item">Public</a>
                        </li>
                        <li>
                            <a href="@Url.Action("Index", "Test", new {id = Model.UserId,  searchParam = Model.SearchParam, sortOrder =Model.SortingParam, filterParam = Visibility.Private})" class="dropdown-item">Private</a>
                        </li>
                    </ul>
                </div>
                <div class="dropdown">
                    <a class="btn btn-primary dropdown-toggle" href="#" role="button" id="dropdownMenuLink" data-mdb-toggle="dropdown" aria-expanded="false">
                        Order By
                    </a>
                    <ul class="dropdown-menu" aria-labelledby="dropdownMenuLink">
                        <li>
                            <a href="@Url.Action("Index", "Test", new {id = Model.UserId,  searchParam = Model.SearchParam, filterParam = Model.FilterParam, sortOrder = SortingParam.Date })" class="dropdown-item"><i class="fa fa-arrow-up" aria-hidden="true"></i> Date (oldest)</a>
                        </li>
                        <li>
                            <a href="@Url.Action("Index", "Test", new {id = Model.UserId,  searchParam = Model.SearchParam, filterParam = Model.FilterParam,sortOrder = SortingParam.DateDesc})" class="dropdown-item"><i class="fa fa-arrow-down" aria-hidden="true"></i> Date (newest)</a>
                        </li>
                        <li>
                            <a href="@Url.Action("Index", "Test", new {id = Model.UserId,  searchParam = Model.SearchParam, filterParam = Model.FilterParam, sortOrder = SortingParam.Name })" class="dropdown-item"><i class="fa fa-arrow-up" aria-hidden="true"></i> Title </a>
                        </li>
                        <li>
                            <a href="@Url.Action("Index", "Test", new {id = Model.UserId,  searchParam = Model.SearchParam, filterParam = Model.FilterParam, sortOrder = SortingParam.NameDesc })" class="dropdown-item"><i class="fa fa-arrow-down" aria-hidden="true"></i> Title</a>
                        </li>
                        @*<li><a class="dropdown-item" href="#">Attempts</a></li>*@
                    </ul>
                </div>
            </div>
        </div>
    </form>
</div>

@if (Model.Tests.Count() != 0)
{
    @if (TempData["Error"] != null)
    {
        <div class="col-md-12 alert alert-danger">
            <span><b>Sorry!</b> - @TempData["Error"]</span>
        </div>
    }
    <div class="container mb-5">
    </div>
    <!-- Convert Model to a List for easier manipulation -->
    @for (int i = 0; i < tests.Count; i += 3)
    {
        <div class="row">
            <!-- Create a row for every three elements -->
            @for (int j = i; j < Math.Min(i + 3, tests.Count); j++)
            {
                var test = tests[j];
                <div class="col-md-4">
                    <!-- Use col-md-4 to divide the row into 3 equal columns on medium-sized screens -->
                    <div class="card mb-3">
                        <div class="card-header"><h5>Title: @test.Name</h5></div>
                        <div class="card-body">
                            <p class="card-text overflow-example">Description: @test.Description</p>
                            <a href="@Url.Action("TestView", "Test", new { testId = test.TestId})" class="btn btn-primary">Details</a>
                            <a href="@Url.Action("Create", "SharedTest", new { testId = test.TestId})" class="btn btn-success btn-rounded">Share</a>
                            <a href="@Url.Action("Edit", "Test", new { testId = test.TestId})" class="btn btn-primary">Edit</a>
                            <!-- Button trigger modal with a unique ID -->
                            <button type="button" class="btn btn-danger" data-mdb-toggle="modal" data-mdb-target="#exampleModal-@test.TestId">
                                Delete
                            </button>

                            <!-- Modal with a unique ID -->
                            <div class="modal fade" id="exampleModal-@test.TestId" tabindex="-1" aria-labelledby="exampleModalLabel-@test.TestId" aria-hidden="true">
                                <div class="modal-dialog">
                                    <div class="modal-content">
                                        <div class="modal-header">
                                            <h5 class="modal-title" id="exampleModalLabel-@test.TestId">Are you sure you want to delete this test?</h5>
                                            <button type="button" class="btn-close" data-mdb-dismiss="modal" aria-label="Close"></button>
                                        </div>
                                        <div class="modal-footer">
                                            <button type="button" class="btn btn-secondary" data-mdb-dismiss="modal">Close</button>
                                            <a href="@Url.Action("Delete", "Test", new { testId = test.TestId, userId = test.UserId})" class="btn btn-danger" data-user-id="@test.TestId">Delete</a>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="card-footer bg-light px-3 mt-2">@test.DateOfCreation.ToString("dddd, dd MMMM yyyy HH:mm")</div>
                            @*<div class="card-footer text-muted"></div>*@
                        </div>
                    </div>
                </div>
            }
        </div>

       
    }
    <div class="container mb-5">
    </div>
    <!-- Add CSS styles to center the pagination bar -->
    <style>
        .pagination-container {
            display: flex;
            justify-content: center;
        }
    </style>

    <div class="pagination-container">
        <nav aria-label="Page navigation example">
            <ul class="pagination">
                @if (Model.CurrentPageIndex > 1)
                {
                    <li class="page-item">
                        <a href="@Url.Action("Index", "Test", new { id = Model.UserId, page = (Model.CurrentPageIndex - 1), searchParam = Model.SearchParam, sortOrder =Model.SortingParam, filterParam = Model.FilterParam})" aria-label="Previous" class="page-link">
                            <span aria-hidden="true">&laquo;</span>
                        </a>
                    </li>
                }

                @for (int j = 1; j <= Model.PageCount; j++)
                {
                    if (j == Model.CurrentPageIndex)
                    {
                        <li class="page-item active"> <a href="@Url.Action("Index", "Test", new {  id = Model.UserId,page = j, searchParam = Model.SearchParam , sortOrder = Model.SortingParam, filterParam = Model.FilterParam})" class="page-link">@j</a></li>
                    }
                    else
                    {
                        <li class="page-item"> <a href="@Url.Action("Index", "Test", new { id = Model.UserId, page = j, searchParam = Model.SearchParam , sortOrder =Model.SortingParam, filterParam = Model.FilterParam})" class="page-link">@j</a></li>

                    }
                }

                @if (Model.CurrentPageIndex < Model.PageCount)
                {
                    <li class="page-item">
                        <a href="@Url.Action("Index", "Test", new {  id = Model.UserId, page = (Model.CurrentPageIndex + 1), searchParam = Model.SearchParam, sortOrder = Model.SortingParam , filterParam = Model.FilterParam})" aria-label="Next" class="page-link">
                            <span aria-hidden="true">&raquo;</span>
                        </a>
                    </li>
                }
            </ul>
        </nav>
    </div>
}
else
{
    <h1>You havn't create tests</h1>
}

